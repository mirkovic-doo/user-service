name: CI/CD pipeline

on:
  push:
    branches:
      - develop
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

env:
  working-directory: ./UserService
  
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.working-directory }}

    steps:
      - uses: actions/checkout@v4
      - run: pwd

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

      - name: Test with the dotnet CLI
        run: dotnet test

      - name: Extract version from csproj
        id: get_version
        run: |
          VERSION=$(grep '<AssemblyVersion>' UserService.csproj | sed -E 's/.*<AssemblyVersion>(.*)<\/AssemblyVersion>.*/\1/')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        working-directory: ${{ env.working-directory }}

      - name: Build Docker image
        run: docker build -t bukiteasy/user-service:${{ github.sha }} .
    
    outputs:
      VERSION: ${{ env.VERSION }}

  publish:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ env.working-directory }}
    if: success() #&& github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      - run: pwd
              
      - name: Build Docker image
        run: docker build -t bukiteasy/user-service:${{ github.sha }} .
      
      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Publish Docker image
        run: |
          IMAGE_TAG=${{ needs.build.outputs.VERSION }}
          docker tag bukiteasy/user-service:${{ github.sha }} bukiteasy/user-service:$IMAGE_TAG
          docker push bukiteasy/user-service:$IMAGE_TAG
  
  version:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: publish
    if: success() #&& github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.build.outputs.VERSION }}
          release_name: Release ${{ needs.build.outputs.VERSION }}
          body: |
            Changes in this release:
            - Description of changes
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  sonarcloud:
    name: Sonarcloud analysis
    runs-on: windows-latest
    needs: build
    
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          cd UserService
          ..\.sonar\scanner\dotnet-sonarscanner begin /k:"mirkovic-doo_user-service" /o:"mirkovic-doo" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
